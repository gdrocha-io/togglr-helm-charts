# Default values for togglr-backend
replicaCount: 1

image:
  repository: togglr/backend
  pullPolicy: IfNotPresent
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: togglr-backend.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  requests:
    cpu: 500m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Application Configuration
config:
  # Server Configuration
  server:
    port: 8080

  # Actuator Configuration
  actuator:
    port: 9090

  # Database Configuration
  database:
    url: "jdbc:postgresql://postgresql.database.svc.cluster.local:5432/togglr"
    username: "togglr"
    password: "F2iDj8kR32XgBMv2"
    # Use existing secret for database credentials (optional)
    # existingSecret: ""
    # usernameKey: "username"
    # passwordKey: "password"

  # Cache Configuration
  cache:
    type: "caffeine" # caffeine or redis
    # redis:
    #   host: "redis-master"
    #   port: 6379
    #   password: ""
    # Use existing secret for Redis password (optional)
    #   existingSecret: ""
    #   passwordKey: "password"

  # JWT Configuration
  jwt:
    secret: "2efd942a42470fd9748db3bd3cc573b5"
    expiration: "86400000" # 24 hours
    # Use existing secret for JWT (optional)
    # existingSecret: ""
    # secretKey: "jwt-secret"

  # Logging Configuration
  logging:
    level: "INFO"
    securityLevel: "WARN"

# Health Check Configuration
healthCheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9090
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9090
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
